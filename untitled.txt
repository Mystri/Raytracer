# point, normal, t, 
class hit_record:
    def __init_(self, p, normal, t):
        self.p = p
        self.normal = normal
        self.t = t
    def set_face_normal(self, r, outward_normal):
        self.front_face = np.dot(r.direction, outward_normal) < 0
        normal = front_face if outward_normal else -outward_normal;

        
class Hittable:
    def hit(ray, t_min, t_max, rec):
        pass
class Sphere(Hittable):
#     Vec3 center
#     float radius
    def __init__(self, center, radius):
        self.center = center
        self.radius = radius
    
#     Hit function: return hit/non-hit for t in [t_min, t_max] and update hit_record if hit. 
    def hit(self, r, t_min, t_max, rec):
        AC = np.subtract(r.origin, self.center)
        a = np.dot(r.direction, r.direction)
        half_b = np.dot(r.direction, AC)
        c = np.dot(AC, AC) - radius * radius
        discriminant = (half_b * half_b - 4 * a * c)
        if (discriminant < 0) :
            return false
        
        sqrtd = math.sqrt(discriminant)
        root = (-b - sqrtd ) / a
        if t_min < root and root < t_max:
            root = (-b + sqrtd) / a
            if root < t_min or t_max < root:
                return false
        rec.t = root
        rec.p = r.at(rec.t)
        rec.normal = (rec.p - self.center) / self.radius
        return true


class Hittable_list(Hittable):
    def __init__(self):
        self.objects = []
    def add(obj):
        objects.append(obj)
    def clear():
        objects = []
    
    
    def hit(r, t_min, t_max, rec):
        temp_rec = None
        hit_anything = false
        temp_closest = t_max
        
        for obj in objects:
            if obj.hit(r, t_min, temp_closest, temp_rec):
                hit_anything = true
                rec = temp_rec
                
        return hit_anything